//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GenderPayGap.Models.GpgDatabase
{
    using Extensions;
    using IdentityServer3.Core;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Security.Claims;
    using System.Security.Principal;

    public partial class User
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public User()
        {
            this.UserStatuses = new HashSet<UserStatus>();
            this.UserTokens = new HashSet<UserToken>();
            this.Organisations = new HashSet<Organisation>();
            Created = DateTime.Now;
            Modified = DateTime.Now;
        }

        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public long UserId { get; set; }
        public string UserRef { get; set; }
        public string JobTitle { get; set; }
        public string Title { get; set; }
        public string Firstname { get; set; }
        public string Lastname { get; set; }
        public string Mobile { get; set; }
        public string MobileVerifyCode { get; set; }
        public Nullable<System.DateTime> MobileVerifySendDate { get; set; }
        public Nullable<System.DateTime> MobileVerifiedDate { get; set; }
        public string EmailAddress { get; set; }
        public string Password { get; set; }
        public string EmailVerifyCode { get; set; }
        public Nullable<System.DateTime> EmailVerifySendDate { get; set; }
        public Nullable<System.DateTime> EmailVerifiedDate { get; set; }
        public string CurrentStatus { get; set; }
        public Nullable<System.DateTime> CurrentStatusDate { get; set; }
        public string CurrentStatusDetails { get; set; }
        public Nullable<System.DateTime> Created { get; set; }
        public Nullable<System.DateTime> Modified { get; set; }

        public virtual ICollection<Organisation> Organisations { get; set; }
        public virtual ICollection<UserToken> UserTokens { get; set; }
        public virtual ICollection<UserStatus> UserStatuses { get; set; }

        [NotMapped]
        public string Fullname {
            get
            {
                return (Title + Firstname + " " + Lastname).TrimI();
            }
        }

        public static string GetUserIdentifier(IPrincipal principal)
        {
            if (principal == null || !principal.Identity.IsAuthenticated) return null;

            var claims = (principal as ClaimsPrincipal).Claims;

            //Use this to lookup the long UserID from the db - ignore the authProvider for now
            var claim = claims.FirstOrDefault(c => c.Type == Constants.ClaimTypes.ExternalProviderUserId);
            return claim == null ? null : claim.Value;
        }

        public static string GetUserClaim(IPrincipal principal, string claimType)
        {
            if (principal == null || !principal.Identity.IsAuthenticated) return null;

            var claims = (principal as ClaimsPrincipal).Claims;

            //Use this to lookup the long UserID from the db - ignore the authProvider for now
            var claim = claims.FirstOrDefault(c => c.Type.ToLower() == claimType.ToLower());
            return claim==null ? null : claim.Value;
        }

        public static GenderPayGap.Models.GpgDatabase.User FindCurrentUser(IPrincipal principal)
        {
            //GEt the logged in users identifier
            var tokenIdentifier = GetUserIdentifier(principal);
            if (string.IsNullOrWhiteSpace(tokenIdentifier)) return null;

            //If internal user the load it using the identifier as the UserID
            long userId = tokenIdentifier.ToLong();
            if (userId > 0) return GpgDatabase.Default.User.Find(userId);

            //If external user the load it using the identifier
            var userToken = GpgDatabase.Default.UserTokens.FirstOrDefault<UserToken>(t => t.TokenIdentifier == tokenIdentifier);
            if (userToken != null && userToken.UserId > 0) return GpgDatabase.Default.User.Find(userToken.UserId);
            return null;
        }
    }
}
