@{
    ViewBag.Title = "Register: Step 1";
}
@model GenderPayGap.WebUI.Models.RegisterViewModel
@using Extensions
@using GenderPayGap.WebUI.Classes
<main id="content" role="main">
    <div class="grid-row">
        <div class="column-full">
            @if (!ViewData.ModelState.IsValid)
            {
                @Html.ValidationSummary("ERRORS:", new { @class = "text-danger" })
            }
            <h1 class="heading-large">
                <span class="heading-secondary">Step 1 of 6</span>
                About you
            </h1>
            @if (!User.Identity.IsAuthenticated)
            {
                <p>If you already have an account, please @Html.ActionLink("sign In", "Create", "Return").</p>
            }
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                @Html.SpamProtectionTimeStamp()
                @Html.HiddenFor(m => m.IdentityProvider)

                <h2 class="heading-medium">Email address</h2>
                <legend class="visuallyhidden">Email</legend>
                <p>Enter an email address that you have access to. The service will send you an email to verify your identity.</p>
                <fieldset>
                    <div class="form-group ">
                        @Html.LabelFor(model => model.EmailAddress, htmlAttributes: new { @class = "control-label col-md-10" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.EmailAddress, new { htmlAttributes = new { @type = "email", @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group ">
                        @Html.LabelFor(model => model.ConfirmEmailAddress, htmlAttributes: new { @class = "control-label col-md-10" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ConfirmEmailAddress, new { htmlAttributes = new { @type = "email", @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ConfirmEmailAddress, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </fieldset>

                <h2 class="heading-medium">Your details</h2>

                <fieldset>
                    <legend class="visuallyhidden">Email</legend>
                    <p>Enter your name and job title. The service will send a gender pay gap PIN by post so you can use the service.</p>
                    <div class="form-group ">
                        @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-10" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group ">
                        <div class="form-group ">
                            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-10" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group ">
                        <div class="form-group ">
                            @Html.LabelFor(model => model.JobTitle, htmlAttributes: new { @class = "control-label col-md-10" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.JobTitle, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.JobTitle, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </fieldset>

                if (!User.Identity.IsAuthenticated || Model.IdentityProvider.EqualsI("GPG"))
                {
                <h2 class="heading-medium">Create password</h2>
                <fieldset>
                    <legend class="visuallyhidden">Password</legend>
                    <div class="text">
                        <p>Your password must be at least 8 characters long and contain:</p>
                        <ul class="list list-bullet">
                            <li>1 lower-case letter</li>
                            <li>1 capital letter and</li>
                            <li>1 number</li>
                        </ul>
                    </div>
                    <div class="form-group ">
                        <div class="form-group ">
                            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-10" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group ">
                        @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-10" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </fieldset>
                }
                <fieldset>
                    <div class="form-group">
                        <input type="submit" class="button" value="Continue" />
                    </div>
                </fieldset>
            }
        </div>
    </div>
</main>
