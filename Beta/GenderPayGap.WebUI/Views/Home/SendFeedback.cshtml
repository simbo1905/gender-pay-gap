@model GenderPayGap.WebUI.Models.Home.FeedbackViewModel
@{
    ViewBag.Title = "Send us feedback - Gender pay gap reporting service";
}
@using GenderPayGap.WebUI.Classes

<main id="content" role="main">
    @using (Html.BeginForm())
    {
        @Html.CustomValidationSummary()
        @Html.AntiForgeryToken()
        @Html.SpamProtectionTimeStamp()

        <div class="grid-row">
            <div class="column-two-thirds">

                <h1 class="heading-large ">
                    Send us feedback
                </h1>

                <h2 class="heading-medium">How easy was this service to use?</h2>

                @Html.ValidationMessageFor(model => model.DifficultyType, null, new {@class = "error-danger"})

                <div class="form-group @Html.SetErrorClass(model => model.DifficultyType, "error")">
                    <label class="block-label selection-button-radio">
                        @Html.CustomRadioButtonFor(m => m.DifficultyType, GenderPayGap.Database.DifficultyTypes.VeryEasy, new { @type = "radio", @class = "styled", @name = "radio-group", @id = "radio-1" })
                        Very easy
                    </label>
                    <label class="block-label selection-button-radio">
                        @Html.CustomRadioButtonFor(m => m.DifficultyType, GenderPayGap.Database.DifficultyTypes.Easy, new { @type = "radio", @class = "styled", @name = "radio-group", @id = "radio-2" })
                        Easy
                    </label>
                    <label class="block-label selection-button-radio">
                        @Html.CustomRadioButtonFor(m => m.DifficultyType, GenderPayGap.Database.DifficultyTypes.Neutral, new { @type = "radio", @class = "styled", @name = "radio-group", @id = "radio-3" })
                        Neither easy nor difficult
                    </label>
                    <label class="block-label selection-button-radio">
                        @Html.CustomRadioButtonFor(m => m.DifficultyType, GenderPayGap.Database.DifficultyTypes.Difficult, new { @type = "radio", @class = "styled", @name = "radio-group", @id = "radio-4" })
                        Difficult
                    </label>
                    <label class="block-label selection-button-radio">
                        @Html.CustomRadioButtonFor(m => m.DifficultyType, GenderPayGap.Database.DifficultyTypes.VeryDifficult, new { @type = "radio", @class = "styled", @name = "radio-group", @id = "radio-5" })
                        Very difficult
                    </label>
                </div>

                <h2 class="heading-medium">Please take a moment to tell us about your experience, what worked and what didn't.</h2>
                <fieldset>
                    <legend class="group text">
                    </legend>
                    <div class="form-group @Html.SetErrorClass(model => model.Details,"error")">
                        <label class="form-label text" for="details">
                            <span class="visuallyhidden">Your feedback<br></span>
                            <span class="form-hint">2000 characters max<br></span>
                        </label>
                        @Html.ValidationMessageFor(model => model.Details, "", new { @class = "error-danger" })
                        <div class="col-md-10">
                            @Html.TextAreaFor(model => model.Details, 10, 67, new { @class = "form-control-3-4", maxlength = 2000 })
                        </div>
                    </div>
                </fieldset>

                <p>We won't respond to your feedback directly but will use it to improve this service. If you are happy to be contacted to give further feedback, please leave your email address and/or phone number.</p>

                <fieldset>
                    
                    <div class="form-group @Html.SetErrorClass(model => model.EmailAddress,"error") form-group-compound">
                        @Html.LabelFor(model => model.EmailAddress, "Your email address (optional)", new { @class = "form-label col-md-2" })
                        @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "error-danger" })
                        <div class="col-md-10">
                            @Html.CustomEditorFor(model => model.EmailAddress, new { @class = "form-control" })
                        </div>
                    </div>

                    <div class="form-group @Html.SetErrorClass(model => model.PhoneNumber,"error") form-group-compound">
                        @Html.LabelFor(model => model.PhoneNumber, "Your phone number (optional)", new { @class = "form-label col-md-2" })
                        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "error-danger" })
                        <div class="col-md-10">
                            @Html.CustomEditorFor(model => model.PhoneNumber, new { @class = "form-control" })
                        </div>
                    </div>

                </fieldset>
                <p>
                    <input class="button" type="submit" role="button" name="command" value="Send feedback" />
                </p>
            </div>
        </div>
    }
</main>