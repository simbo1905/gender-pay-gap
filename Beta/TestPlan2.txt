*********************************************************************************Breadth Returns Test********************************************************************************************
																
Assumptions:
User is logged in.

Setup:
 mock repository and Controller class with overloaded controller to be able to call Mock controller with (user , org) calling mock IRepository
 or real Repository
 mock user
 mock org


################################# LOAD TEST BEGIN: #######################################################
Test Case:
	1.User clicks the start page
Result:
RED: The corresponding view does not load or exist, Appropriate Error message is given.
GREEN: The Correct view is loaded.


Test Case:
	2.Verify the model does not load any data into the form fields
Result:
RED: Model or ViewModel is not empty and returns data to populate fields, Appropriate Error message is given.
GREEN: Model or ViewModel is empty and returns data to populate fields


Test Case:
	3.page check a database for the user if user Iprinciple is not set or null, redirect to login page
Result:
RED: 
GREEN: 


Test Case:
	4.if principle is set and principle not exist in the mock, throw an exception 
Result:
RED: 
GREEN: 


Test Case:
5.if user exist in the database but have not been verified / confirmed (confirmed email)
Result:
RED: 
GREEN: 


Test Case:
6.if user exist in the database but have not been been associated with an organisation
Result:
RED: 
GREEN:

######################### LOAD TEST END ######################################



Test Case:
7.if user exist in the database but have not been been associated with an organisation which will affect the deadline date for submission 
if Private: Deadline date: 6/4/2018: -> more tests for these deadline date
if Public: Deadline date:  1/4/2018: -> more tests for this deadline date 
Result:
RED: 
GREEN:


Test Case:
	8. if user fills in form before the just deadline date, and clicks continue just after the deadline date, 
		before submission once continue is clicked Datetime.now must be verified against deadline date for if company is public or private.
Result:
RED: 
GREEN:



########################################### DESIGN PATTERN: ####################################
create controllers to use default constructor to call child constructors with Irepository so that you can call real repo and mock repo
mock user
mock user without confirmation
mock user with confirmation without organisation
mock user with organisation without pin e.t.c

Helper methods:
GetHttpContext()
GetLoggedInUser()

######################################### END DESIGN PATTERN ##################################

SCENARIOS
1.Register and email sent, then log back in:


Refactored test:

 [Test, Order(1)]
        [Description("Ensure the register.Index action the user is not already logged in")]
        public void EnsureRegisterControllerReturned()
        {
            // Arrange
            var user = new User() { UserId = 1,EmailVerifiedDate=DateTime.Now };
            var organisation = new Organisation() { OrganisationId = 1 };
            var userorganisation = new UserOrganisation() { OrganisationId = 1, UserId=1 };

            var controller = TestHelper.GetController<RegisterController>(1,user,organisation,userorganisation);

            // Act
            var result= controller.Index();

            // Assert
            Assert.That(result, Is.TypeOf<RedirectToRouteResult>());
        }


Submission Journey:
0.Clicking on the submit button should return the return view

1. User signs in successfully
2. User signs in successfully and has associated with an organisation
4. User signs in successfully and has been verified
5. User signs in successfully and has been verified Verify email verification date > 
6. User signs in successfully and has pin code 
7. User signs in successfully and has pin code verify pin code is correct

	
********************************************************************************************GENDER PAY GAP FORM PAGE************************************************************************************

When GPG Page loads:
Verify user is logged in from above
 
Tests for the gpg return form page:



Submitting:
verify output values from what is entered

verify when you click on the continue button->
Numeric validation test : -> validate one decimal place -> if a user enters a whole number it should automatically convert to 1 decimal place *use regular expression
verify all fields are numerical and have one decimal 0.0 place even if you put in a whole number *use regular expression

Range validation test :-> 200.00 to +200.00
loads up persone responsible page --> method that calls this page and view

****************************************************************************************************************************************************************************************************



*************************************************************************************PERSON RESPONSIBLE*********************************************************************************************
Load person responsible:
Make sure it came from previous page and all the hidden fields in the formcollection or model (including hidden fields are not empty they hold previous info collected)
fields load up empty first name last name and title feilds from the model /form collection fields

Submitting person responsible:
verify when you click on the continue button->
All the fields are not empty and validated i.e text use reg expressions for text allowed only, and all fields are mandatory
opens up links to you gender pay gap information page ( the next page)


**********************************************************************************************GENDER PAG GAP INFORMATION********************************************************************************
load gender pay gap information:
Make sure it came from previous page and all the hidden fields in the formcollection or model (including hidden fields are not empty they hold previous info collected)
gender pay gap information Text box / page loads empty
it is optional

submit gender pay gap information:
verify when you click on the continue button->
if it is not empty it should adhere to the mandatory http:, https: and ftp: prepended followed by a web address validation using reg expression for www.blah.com /.co/.uk/ e.t.c
if it is empty it should pass the test -> (if empty || filled && with http: prepended in front the the text when filled)
if filled verify the employers website link with the organisation to see if there is a match
loads up the review page 

load review page:
Make sure it came from previous page and all the hidden fields in the formcollection or model (including hidden fields are not empty they hold previous info collected)
loads up the review page with all the data from the model /form fields of all the previous pages
verify the information in the review page matches all the previously collected information from the form collection ( hidden fields) / model
note:edit utton is now on the next page.

submit review page:
Make sure it came from previous page and all the hidden fields in the formcollection or model (including hidden fields are not empty they hold previous info collected)
loads up submitted gpg page
verify see your gpg data link should take you to the viewing service.
verify that 'correct your gpg data' should take you back to the enter gpg data page with all the previous info entered for editing.
verify editing your data and clicking continue will take you through each page step by step all the way back to the review page with the edited data and all the way to the submit gpg page( this page)
.
***********************************************************************************************************************************************************************************************************

Create ReturnViewModel

check for return view
if not check for a new view



Goals for the weekend:
Make sure the submission is running - > done
add more unit tests for all pages submission ->
ask acceptance test from alan - > asked via email -> work through and check our TDD
merge projects together and make sure all our pages work together correctly - > done 
cleanse every page for static to dynamic values 
replace TempData with BaseController.StashModel() and UnStashModel -- > 
change ReturnController to SubmitController  ->  Done
Work out AccountingDate
if (unstashmodel  == null)
RedirecttoAction("Step1")



1.1. I have renamed Return controller to Submit controller everywhere for consistency. Done on Sunday.
2. Steps aren’t using the Stash/Unshash I showed you on Friday. Done on Sunday
3. Whenever returning a view you must specify the title otherwise you cant check for correct view being returned in unit tests. Done
4. Also note instead of RouteConfig I am now using [Route] attributes on actions/controller – its easier to work with and change this way. O.k ? how doi spwcify url Config 

5. Back buttons don’t work/appear on all steps - Add a back link to all steps using command button which does a redirecttoaction like I am doing in register controller. The previous GET step should then Unshash model and hidden values preserved in hidden fields on page ready for next button click .

6. Get rid of the Backy button on the bottom. done
7. Change column-twothirds to column-full class otherwise inline errors wrap around next to textboxes - CHECK ALL PAGES!
8. fields aren’t validating correctly when entering decimal places make sure min is -200.9 and max I +200.9 --> Done
9. If we are only allowing 1 decimal place why are we showing 0.00? CHANGE FORMATTING.
10. Whenever somone goes to a Step direct and skips previous steps user should be shown an error message with a redirect link to initial step like I am doing with CheckUserRegisteredOK. You should be able to do this by checking the model exists in stash and HttpContext.Request.UrlReferrer - done, WILL RECHECK AND VERIFY
11. All the views still have fixed years – they should be dynamic based on Return.AccountYear - done!
12. Step4 Push was returning View(“Step4”) when complete – it should eventually redirect to the govuk page. For testing purposes we should get the HTML from tarik/Chris and place on Confirm(Step5) action for now until we are integrated on gov.uk as the user will need some kind of confirmation – for now just use step 5 content but with dynamic dates and remove link to view data. -> done
13. Step 1 is not reloading previously saved data -> done
14. You should also check the current user has permission to submit any loaded returns -> done
15. Step 1 is not loading new return when year passes accounting date threshold ->  FIXED GET START DATE SO NOW RECHECK
16. Step1 is not loading the link info - Done.
17. Step1 should also double-check the loaded return has an accounting date for the current year before showing --> CHECK
18. Step 1 should also check the current status of existing returns is “Active” CHECK
19. Step4 is not saving the correct accounting date for the return
20. Step4 is not setting the status of the return to “Active”
21. Step4 is not setting the status of the previous return to “Retired”
22. You are not checking for the correct view/redirect being returned in all unit tests
23. There are no unit tests for Step4
24. Virtually all your unit tests are failing
25. You need unit tests for all the conditions in the code


PrivateAccountingDate: 4/5/2017
PublicAccountingDate:   3/31/2017




Private Beta outcome and comments:
1. Get a list of councils we can add to the DB (companies report on behalf)

*******************************************************************Sprint4 Tasks:******************************************************************
Merge Dev Repo into GpgBeta Repo:
	best way to merge 2 repos together and fix bugs github
	

TDD Submission Journey: (3 Days)
	going through the journey with Tarik 
	Adding inital data for the journey
	Required classes and creating them in the DB
	Creating the TDD
	Creating the viewresult methods
	Creating the controllers maybe using Area ? and have seperate MVC for both
	Creating the views

****************************************************************************************************************************************************	
	
	Design:
	Go through Tariks design changes and match them,

	Step1 changes:
	Change 'back' button to 'cancel' and only show it if refferal is from reivew page 


	think of the journey from review
	
	notes: use the request.urlrefferer.tostring to know where redirection came from to 
	logic:
	
	In review:
	if you click edit on data points
	you are redirected to the datapoints step1 page
	
	step 1, 
	then use make changes in the page... and click continue
	in the step 1 action method 
	if(request.urlreferer == "review page (step4)")
	{
		unhide the cancel button and redirect to review page
		make sure the new change is carried across to the review page  
	}

	in the step 2 and 3 action method 
	if(request.urlreferer == "review page (step4)")
	{
		 change link name 'back' to 'cancel' button and redirect to review page
		 make sure the new change is carried across to the review page  
	}

	refactor and then create a method()


	call this instead in the actions method to handle back link behaviour
	public void UnhideOrChangeLinkName( ViewName _viewName, string nameToAssign)
	{
		if(step2 or step3)
			change the 'back' link button name to 'cancel' (nameToAssign)

		if(step1)
			unhide the cancel button 

	}



	if current step is review 
		change the back button name from 'back' to 'cancel' and the url of 'cancel' to go to review
		

	public registration Journey:
	methodology on how to create the registeration journey -> use if org.private or if org.public
*************************************************************************************************************************************************

TODAY:
		merge between alpha and beta is now done
		create a new working branch  from task work item in vso
		work on tariks design changes on submission and registration half done

		edit journeys now work retest and clean up code in the morning
		Bug:
		also when cancel is clicked if you edit a field the cancel should ignore the edit, but it still persists
		so i have to save the original data in a TempData["temp"] and if cancel is clicked then push that back into the stash model as this is should be the data before any edit
		Do all the text and UI changes in the morning
****************************************************************************************************************************************************

Public Sectors Tasks:
1.Create the XML File and input dummy Data in for at least 31 records for pagination purposes -> Done.

2.Make sure navigation for public sector works without breaking private sector registration navigation, backwards and forwards -> Done needs Test.

3.make sure that the search textfield works -> Done
3a.and also with pagination, -> in progress
3b.re-test registration journey both private and public sector against this point.

4.Do Validation for email pattern, if the email registered with does not match with the organisation one they click on from the search in select your organisation then, dont let them pass 
do modelState validation and add it to the page to throw the error -> Done

5.Add your organisation in the form and make sure that they can save their organisation address details to the database
 
6.Show this on the next form step

7.confirm and complete Saves the details in the database




New Steps for Public Sector Journey:
Step3: select public sectors
Step4: Search and select your organisation
Step4A: Add your organisation
Step5: Confirm your organisations details -> Show this on the next form step

Notes:
Fix pagination.
check why 'page' argument should be 1 instead of 0 in SearchOrg() method -> for start page of pages with results of pageSize

Bugs:
 confirm your email address, resend button does not work!
 
 task clean up sub,ission jouney

